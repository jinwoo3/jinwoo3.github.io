{"hash":"c670d5ee025030f952f3448986aec25d458077d1","data":{"posts":{"edges":[{"node":{"id":"ae5576a53167114266f6ab8c69cfe19f"},"prev":{"path":"/blog/2021/04/26/mobile-app-deploy-automation/","title":"모바일 앱 매주 배포하기: 자동화하기","author":{"title":"Jimmy Lee","path":"/author/jimmy-lee/"}},"next":null},{"node":{"id":"48ed018164c43aeb8996774e3f8f6c22"},"prev":{"path":"/blog/2021/04/18/mobile-app-deploy-create-rule/","title":"모바일 앱 매주 배포하기: 규칙 정하기","author":{"title":"Jimmy Lee","path":"/author/jimmy-lee/"}},"next":{"path":"/blog/2021/05/20/about-fundamental-of-agile/","title":"애자일의 근본 알아보기","author":{"title":"Jimmy Lee","path":"/author/jimmy-lee/"}}},{"node":{"id":"29c698b6f384ebf2384dbd2640cf91c2"},"prev":{"path":"/blog/2021/04/16/squad-process-and-product-designer/","title":"[Design] 숨고의 애자일, 스쿼드의 업무 프로세스와 프로덕트 디자이너가 하는 일","author":{"title":"Summer Lee","path":"/author/summer-lee/"}},"next":{"path":"/blog/2021/04/26/mobile-app-deploy-automation/","title":"모바일 앱 매주 배포하기: 자동화하기","author":{"title":"Jimmy Lee","path":"/author/jimmy-lee/"}}},{"node":{"id":"beec0a16612692a60906c5d0794787b2"},"prev":{"path":"/blog/2021/04/07/website-benchmark-with-lighthouse/","title":"Lighthouse로 웹사이트 성능 측정하기","author":{"title":"Zoey Kang","path":"/author/zoey-kang/"}},"next":{"path":"/blog/2021/04/18/mobile-app-deploy-create-rule/","title":"모바일 앱 매주 배포하기: 규칙 정하기","author":{"title":"Jimmy Lee","path":"/author/jimmy-lee/"}}},{"node":{"id":"b55c21505707bfeb0c3e200227e80b50"},"prev":{"path":"/blog/2020/12/18/improve-kubernetes-cd/","title":"Kubernetes 환경 CD(Continuous Deployment) 개선하기","author":{"title":"Derek","path":"/author/derek/"}},"next":{"path":"/blog/2021/04/16/squad-process-and-product-designer/","title":"[Design] 숨고의 애자일, 스쿼드의 업무 프로세스와 프로덕트 디자이너가 하는 일","author":{"title":"Summer Lee","path":"/author/summer-lee/"}}},{"node":{"id":"985f56840e2f22845987f529305dfc2f"},"prev":{"path":"/blog/2020/12/09/auto-docs-with-swagger-and-redoc/","title":"Swagger와 Redoc을 이용한 API 문서 자동화하기","author":{"title":"Paul Cho","path":"/author/paul-cho/"}},"next":{"path":"/blog/2021/04/07/website-benchmark-with-lighthouse/","title":"Lighthouse로 웹사이트 성능 측정하기","author":{"title":"Zoey Kang","path":"/author/zoey-kang/"}}},{"node":{"id":"dda2ca28bab0299deec8a89a846e6d48"},"prev":{"path":"/blog/2020/11/02/soomgo-msa-architecture-soomgo-py/","title":"숨고의 MSA Architecture를 위한 프레임워크 Soomgo-py","author":{"title":"Paul Cho","path":"/author/paul-cho/"}},"next":{"path":"/blog/2020/12/18/improve-kubernetes-cd/","title":"Kubernetes 환경 CD(Continuous Deployment) 개선하기","author":{"title":"Derek","path":"/author/derek/"}}},{"node":{"id":"d7c5f4fc0af185befef675bf903b0cc7"},"prev":{"path":"/blog/2020/09/29/http2-for-all/","title":"모두를 위한 Http2","author":{"title":"Kei Jeon","path":"/author/kei-jeon/"}},"next":{"path":"/blog/2020/12/09/auto-docs-with-swagger-and-redoc/","title":"Swagger와 Redoc을 이용한 API 문서 자동화하기","author":{"title":"Paul Cho","path":"/author/paul-cho/"}}},{"node":{"id":"bb8fc898b05cf4e28cc2cb9252d551dc"},"prev":null,"next":{"path":"/blog/2020/11/02/soomgo-msa-architecture-soomgo-py/","title":"숨고의 MSA Architecture를 위한 프레임워크 Soomgo-py","author":{"title":"Paul Cho","path":"/author/paul-cho/"}}}]},"post":{"id":"48ed018164c43aeb8996774e3f8f6c22","title":"모바일 앱 매주 배포하기: 자동화하기","excerpt":"Mobile App Deploy","featuredImage":"https://miro.medium.com/max/1400/0*rc6WXTJcCjBQ72Zn","content":"<p><img src=\"https://miro.medium.com/max/1400/0*rc6WXTJcCjBQ72Zn\"><br>\n<em>Photo by <u><a href=\"https://unsplash.com/@lennykuhne?utm_source=medium&#x26;utm_medium=referral\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lenny Kuhne</a></u> on <u><a href=\"https://unsplash.com/?utm_source=medium&#x26;utm_medium=referral\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></u></em></p>\n<p>안녕하세요. 숨고 모바일 챕터에서 리액트 네이티브 앱 개발을 하는 Jimmy입니다.\n숨고에서는 매주 수요일마다 정기적으로 제품을 배포하고 있는데요. 모바일 앱, 웹, 서버 모두 예외는 없습니다. <u><a href=\"\">각기 다른 목표를 가진 여러 스쿼드</a></u>에서 작업한 일감 들이 병합된 뒤 함께 배포되고 있습니다.\n<u><a href=\"\">이전 글</a></u>에 이어서 이 글에서는 숨고에서 모바일 앱을 일반 사용자와 내부 테스터에게 배포하는 방법에 대해 소개합니다.</p>\n<h1 id=\"qa를-거쳐-배포하기\"><a href=\"#qa%EB%A5%BC-%EA%B1%B0%EC%B3%90-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QA를 거쳐 배포하기</h1>\n<p>숨고에서 개발자가 작업한 코드는 두 번의 QA를 통과한 뒤에 배포되고 있습니다. 첫 번째는 스쿼드 내부 QA, 두 번째는 통합 QA 입니다.</p>\n<p><strong>MS 앱센터</strong></p>\n<p>QA를 진행하기 위해서는 내부 테스터들에게 최신 버전의 앱을 배포해야 합니다. 이를 위한 플랫폼으로는 MS 앱센터를 사용하고 있습니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*2ip-wQxJDzx4sVwSnITo-g.png\">\n<em>MS 앱센터를 통해 내부 테스터에게 앱 전달</em></p>\n<p><strong>스쿼드 내부 QA</strong></p>\n<p>각 스쿼드에서 작업한 코드는 통합 QA를 받기 전에 스쿼드 내부 QA를 진행합니다. 이 단계에서는 스쿼드 구성원(개발자, 디자이너, PO 등)들이 함께 스쿼드 내에서 진행한 일감이 정상적으로 동작하는지를 확인합니다. 개발자는 앱센터를 통해 스쿼드원들에게 테스트할 버전의 앱을 전달하고, 수정이 필요할 경우 새 버전을 다시 전달하게 됩니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*dP-8fu-s3kl5i58yuN2TAA.png\"><br>\n<em>스쿼드 A에서 내부 QA를 하는 과정. 버전 identifier의 ‘a’는 스쿼드 이름입니다</em></p>\n<p><strong>통합 QA</strong></p>\n<p>스쿼드 내부 QA가 완료된 코드들은 하나로 병합된 뒤 통합 QA를 진행합니다. 이 단계에서는 QA 챕터에서 코드들을 병합한 뒤에도 사이드 이펙트 없이 각 스쿼드의 작업이 잘 동작 하는지 확인하고, 숨고 서비스의 중요한 기능들이 잘 동작 하는지를 확인합니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*nu0rwkU2vS_PRejkm1b4YA.png\"><br>\n<em>통합 QA를 하는 과정</em></p>\n<p><strong>일반 사용자에게 배포</strong></p>\n<p>통합 QA가 완료되면 배포 준비가 완료된 것으로, 마켓을 통해 일반 사용자에게 배포하게 됩니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*Yjj_-pndKmLWjsXzXeVCOQ.png\"><br>\n<em>마켓을 통해 일반 사용자에게 앱 전달</em></p>\n<h1 id=\"쉽게-배포하기\"><a href=\"#%EC%89%BD%EA%B2%8C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쉽게 배포하기</h1>\n<p>내부 테스터와 일반 사용자에게 새 버전의 빌드를 배포할 때마다 어딘가에서는 다음 작업들을 진행해야 합니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*f-c-wIjP2arI4rnm1hxZnw.png\"><br>\n<em>숨고에서는 리액트 네이티브를 사용하기때문에 한번에 두가지 앱을 배포하게 됩니다</em></p>\n<p>개발자가 직접 이 작업들을 하려면 적게 잡아도 3~40분은 필요할 텐데요, 외부에서 자동으로 수행하게 하면 개발자의 능률을 높이고 잦은 배포도 쉽게 할 수 있습니다.</p>\n<p>그래서 우리는 이런 것들로 자동화를 하고 있습니다:</p>\n<ul>\n<li><strong>버전 변경 스크립트:</strong> 버전을 수정하고, git 태그를 생성하는 스크립트 사용</li>\n<li><strong>CircleCI:</strong> 클라우드에서 빌드와 배포를 수행</li>\n</ul>\n<h1 id=\"버전-변경-스크립트\"><a href=\"#%EB%B2%84%EC%A0%84-%EB%B3%80%EA%B2%BD-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>버전 변경 스크립트</h1>\n<p>스크립트로 이런 반복 작업을 처리합니다:</p>\n<ul>\n<li>Android, iOS 설정 파일, package.json의 버전 이름과 버전 코드를 현재 브랜치와 버전을 기준으로 규칙에 따라 동일하게 수정하기</li>\n<li>새 버전으로 git 태그 생성하기</li>\n</ul>\n<p>스크립트는 package.json에 선언되어있고 이렇게 호출하면 버전 변경이 완료됩니다.</p>\n<pre class=\"language-zsh\"><code class=\"language-zsh\">npm run version:bump</code></pre>\n<p>Android, iOS 설정 파일은 스크립트 내부에서 <a href=\"https://github.com/stovmascript/react-native-version\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-native-version</a>을 이용해서 package 버전을 따라 수정하도록 되어있습니다.</p>\n<p>버전을 변경한 뒤 리모트로 푸시하면 CircleCI에서 배포가 시작됩니다.</p>\n<h1 id=\"circleci\"><a href=\"#circleci\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CircleCI</h1>\n<p>클라우드에서 자동으로 빌드와 배포를 하기 위해 CircleCI를 사용하고 있고 워크플로우는 두 가지가 설정되어있습니다:</p>\n<ul>\n<li><strong>pre-release 워크플로우:</strong> 테스트용 빌드를 수행하고 앱센터에 배포</li>\n<li><strong>release 워크플로우:</strong> 마켓용 빌드를 수행하고 마켓에 배포</li>\n</ul>\n<p>워크플로우는 git 태그가 리모트에 푸시되면 시작됩니다. 태그가 release 버전(SEMVER 규칙상)이면 release 워크플로우가, pre-release 버전이면 pre-release 워크플로우가 시작됩니다.</p>\n<p><strong>pre-release 워크플로우</strong></p>\n<p>pre-release 워크플로우가 시작되면 CircleCI에서 앱센터 코드 푸시를 통해 배포를 시작함과 동시에 슬랙을 통해 개발자에게 네이티브 앱으로도 배포 할지 물어봅니다. 개발자가 승인할 경우 코드 푸시, 네이티브 앱 모두 배포됩니다. 배포 대상은 내부 테스터입니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*FJLSjRo5FikTcrg8xXkrtA.png\"><br>\n<em>흐름</em></p>\n<p><img src=\"https://miro.medium.com/max/700/1*mqKbO0xJuJFcDnoAobHMJQ.png\"><br>\n<em>발송되는 슬랙 메세지</em></p>\n<p><img src=\"https://miro.medium.com/max/700/1*BcLZLBDY2ft_I5wcSMfIpQ.png\"><br>\n<em>CircleCI 웹 인터페이스에서는 이런 모습입니다</em></p>\n<p><strong>release 워크플로우</strong></p>\n<p>release 워크플로우가 시작되면 CircleCI에서 슬랙을 통해 개발자에게 배포할 플랫폼을 물어봅니다. 플랫폼을 선택하면 일반 사용자에게 배포가 이루어집니다.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*frhoF2x9dLVA3eZQsVBIag.png\"><br>\n<em>흐름</em></p>\n<p><img src=\"https://miro.medium.com/max/700/1*1D3uYODP32f9I8uPY_tB-w.png\"><br>\n<em>발송되는 슬랙 메세지</em></p>\n<p><img src=\"https://miro.medium.com/max/700/1*rWozYKtfkQXoriY-MptGEA.png\"><br>\n<em>CircleCI 웹 인터페이스에서는 이런 모습입니다</em></p>\n<p>이렇게 숨고에서는 배포 과정을 자동화 함으로써 이런 경험을 할 수 있었습니다.</p>\n<ul>\n<li>개발자들이 배포를 신경 쓰지 않고 개발에 집중</li>\n<li>새로 합류한 개발자도 쉽게 배포</li>\n<li>배포에 필요한 반복 작업들을 쉽고 일관되게 처리</li>\n</ul>\n","tags":[{"id":"Development"},{"id":"Mobile"},{"id":"CI/CD"}],"author":{"path":"/author/jimmy-lee/","title":"Jimmy Lee","image":"uploads/author-images/jimmy.png","blurb":"Soomgo Mobile Engineer"}}},"context":{}}