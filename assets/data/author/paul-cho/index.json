{"hash":"900ef11c0f087c4e669d34df732f7d5aa26548cc","data":{"author":{"title":"Paul Cho","path":"/author/paul-cho/","image":"uploads/author-images/paul.jpeg","blurb":"Soomgo Backend Engineer","content":"<h1 id=\"bio\"><a href=\"#bio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bio</h1>\n<p>If you would like your authors to have a bio, welp, it can go right here.</p>\n","belongsTo":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"dda2ca28bab0299deec8a89a846e6d48","title":"Swagger와 Redoc을 이용한 API 문서 자동화하기","excerpt":"About Auto-Docs","featuredImage":"https://miro.medium.com/max/700/1*tG1WL6rffhHbSc3fbQTBRw.png","path":"/blog/2020/12/09/auto-docs-with-swagger-and-redoc/","content":"<p>안녕하세요. 숨고 백엔드 엔지니어 Paul 입니다.</p>\n<p>이번 포스팅에서는 Soomgo-py에 추가된 기능인 Auto-Docs(자동 문서화)에 대해 기록하려 합니다. Soomgo-py가 무엇인지에 대해서는 <a href=\"http://localhost:8080/blog/2020/11/02/msa-architecture-soomgo-py/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>를 참고해 주세요.</p>\n<p>Python의 대표적인 API 문서 도구로는 <u>Swagger</u>와 <u>ReDoc</u>이 있습니다. Swagger는 V3+부터 OpenAPI라는 이름으로 변경되었습니다. Soomgo-py에서 제공하는 Auto-Docs는 개발자가 API를 구현하면서 문서화를 위한 코드를 추가하지 않아도 위에서 언급한 Swagger와 Redoc을 활용하여 문서를 자동으로 생성해 주는 것을 의미합니다. 이로 하여금 개발자는 비즈니스 로직에 더욱 집중할 수 있고 리소스를 절약할 수 있습니다.</p>\n<h1 id=\"사용된-라이브러리\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%90%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>사용된 라이브러리</h1>\n<ol>\n<li>Swagger UI — Interactive API 문서 도구 입니다.</li>\n<li>ReDoc — Alternative API 문서 도구 입니다.</li>\n<li>OpenAPI Specification(OAS)—Swagger에서 OpenAPI 문서화를 위한 JSON 포맷의 표준 인터페이스 입니다. 이를 활용하면 특정 언어에 구애받지 않고 문서화 할 수 있고 위에서 언급한 Swagger UI, ReDoc은 OAS를 지원하고 있습니다.</li>\n<li>apispec —OAS generator인 Python 라이브러리입니다. Marshmallow schema를 OAS로 생성해 주는 플러그인이 기본적으로 내장되어 있습니다.</li>\n</ol>\n<h1 id=\"구현\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현</h1>\n<ol>\n<li>ReDoc HTML 문서 작성</li>\n</ol>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocsResource</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n        &lt;!DOCTYPE html>\n        &lt;html>\n        &lt;head>\n            &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\">\n            &lt;title>Swagger UI&lt;/title>\n        &lt;/head>\n        &lt;body>&lt;div id=\"swagger-ui\">&lt;/div>\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\">&lt;/script>\n        &lt;script>\n            const ui = SwaggerUIBundle({\n                url: 'openapi.json',\n                dom_id: '#swagger-ui',\n                presets: [\n                    SwaggerUIBundle.presets.apis,\n                    SwaggerUIBundle.SwaggerUIStandalonePreset\n                ],\n                layout: \"BaseLayout\",\n                deepLinking: true,\n                showExtensions: true,\n                showCommonExtensions: true\n            })\n        &lt;/script>\n        &lt;/body>\n        &lt;/html>\n        \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp<span class=\"token punctuation\">.</span>content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/html'</span>\n        resp<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>html</code></pre>\n<ol start=\"2\">\n<li>ReDoc HTML 문서 작성</li>\n</ol>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">RedocResource</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n    &lt;!DOCTYPE html>\n        &lt;html>\n        &lt;head>\n        &lt;meta charset=\"utf-8\"/>\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        &lt;title>ReDoc&lt;/title>\n        &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n        &lt;/head>\n        &lt;body>\n        &lt;redoc spec-url=\"openapi.json\">&lt;/redoc>\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"> &lt;/script>\n        &lt;/body>\n        &lt;/html>\n        \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp<span class=\"token punctuation\">.</span>content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/html'</span>\n        resp<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>html</code></pre>\n<ol start=\"3\">\n<li>apispec 초기화</li>\n</ol>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenAPI</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init_spec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>spec <span class=\"token operator\">=</span> APISpec<span class=\"token punctuation\">(</span>\n            title<span class=\"token operator\">=</span><span class=\"token string\">'API Service'</span><span class=\"token punctuation\">,</span>\n            version<span class=\"token operator\">=</span><span class=\"token string\">'1.0.0'</span><span class=\"token punctuation\">,</span>\n            openapi_version<span class=\"token operator\">=</span><span class=\"token string\">'3.0.2'</span><span class=\"token punctuation\">,</span>\n            plugins<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>MarshmallowPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"4\">\n<li>routes를 순회하면서 OAS 인터페이스를 응답하는 /openapi.json 구현</li>\n</ol>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenAPI</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_spec_path</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        _spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'path'</span><span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'parameters'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>_spec_path_parameters<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'operations'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                method<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">'summary'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>_spec_path_summary<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'operationId'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'tags'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>_spec_path_tags<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        responses <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_spec_path_responses<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> responses<span class=\"token punctuation\">:</span>\n            _spec<span class=\"token punctuation\">[</span><span class=\"token string\">'operations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'responses'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> responses\n\n        description <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_spec_path_description<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> description<span class=\"token punctuation\">:</span>\n            _spec<span class=\"token punctuation\">[</span><span class=\"token string\">'operations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> description\n\n        security <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_spec_path_security<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> security<span class=\"token punctuation\">:</span>\n            _spec<span class=\"token punctuation\">[</span><span class=\"token string\">'operations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'security'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> security\n\n        request_body <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_spec_path_request_body<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> request_body<span class=\"token punctuation\">:</span>\n            _spec<span class=\"token punctuation\">[</span><span class=\"token string\">'operations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'requestBody'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request_body\n\n        self<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>_spec<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        routes <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_get_all_routes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> route <span class=\"token keyword\">in</span> routes<span class=\"token punctuation\">:</span>\n            path<span class=\"token punctuation\">,</span> resource <span class=\"token operator\">=</span> route\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> method<span class=\"token punctuation\">,</span> partial_resource <span class=\"token keyword\">in</span> resource<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>_spec_path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> partial_resource<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> mod <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> mod<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'on_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        _<span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n\n                        self<span class=\"token punctuation\">.</span>_spec_path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">to_dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span>to_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"https://miro.medium.com/max/700/1*tG1WL6rffhHbSc3fbQTBRw.png\"><br>\n<em>Swagger UI</em></p>\n<p><img src=\"https://miro.medium.com/max/1000/1*gGIgkQQEGP2_oNVrlBLCqw.png\"><br>\n<em>ReDoc</em></p>\n<h1 id=\"customizing\"><a href=\"#customizing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Customizing</h1>\n<p>아무리 잘 구조화된 프레임워크라도 다양한 상황의 다양한 요구 조건을 커버하기란 쉽지 않기 때문에 Application 레벨에서 커스터마이징 할 수 있는 유연함이 제공되어야 합니다. Soomgo-py Auto-Docs에서는 Inner Class로 문서를 커스터마이징 할 수 있습니다.</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleUpdateResource</span><span class=\"token punctuation\">(</span>UpdateResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> SampleModel\n    pk_column <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span>\n    pk_url_kwarg <span class=\"token operator\">=</span> <span class=\"token string\">'sample_id'</span>\n    validation_schema <span class=\"token operator\">=</span> SamplePayloadSchema\n    authentication_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenAPI</span><span class=\"token punctuation\">:</span>\n        tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sample'</span><span class=\"token punctuation\">]</span>\n        summary <span class=\"token operator\">=</span> <span class=\"token string\">'샘플 수정'</span>\n        parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"sample_id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"in\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        security <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"token_authentication\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"schema\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"$ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#/components/schemas/SampleUpsertSchema\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        description <span class=\"token operator\">=</span> <span class=\"token string\">'샘플 수정 API 입니다.'</span></code></pre>\n<p><img src=\"https://miro.medium.com/max/700/1*MftbISUUxozAyBUjNRlFPg.png\"></p>\n<p><img src=\"https://miro.medium.com/max/1000/1*3TbXZhTB4YVZB859O9WWQQ.png\"></p>\n<p>제품을 구현하는 가장 비싼 비용 중에 하나가 “개발자 리소스”라고 생각합니다. 그래서 많은 기술 조직이 자동화를 통해 개발자 리소스를 절약하고 절약한 리소스를 통해 더욱 생산적인 일을 하거나 제품의 품질을 높이기 위해 노력하고 있습니다. 이러한 프레임워크를 사용하는 이유도 마찬가지로 개발자 리소스를 절약하기 위함 입니다.</p>\n<p>적어도 저희 조직에선 Soomgo-py Auto-Docs를 통해 개발자가 문서화를 위해 별도의 노력을 하지 않고 있으니 앞서 언급한 목표를 충분히 수행한다고 볼 수 있습니다.</p>\n<p>감사합니다.</p>\n","date":"December 9th 2020","author":{"id":"paul","title":"Paul Cho","image":"uploads/author-images/paul.jpeg","path":"/author/paul-cho/"}}},{"node":{"id":"d7c5f4fc0af185befef675bf903b0cc7","title":"숨고의 MSA Architecture를 위한 프레임워크 Soomgo-py","excerpt":"About Soomgo-py","featuredImage":"https://miro.medium.com/max/698/1*VhpqqjUnzyrXoNhdaXNCbg.png","path":"/blog/2020/11/02/soomgo-msa-architecture-soomgo-py/","content":"<p>안녕하세요. 숨고 백엔드 엔지니어 Paul 입니다.</p>\n<p>이번 포스팅 에서는 숨고 백엔드 챕터 내부에서 제작한 MSA Architecture를 위한 프레임워크 <strong>Soomgo-py</strong>에 대해 기록하려 합니다.</p>\n<p>Soomgo-py는 기본적으로 API 전용 프레임워크인 Falcon을 기반으로 제작 되었고, 현재 이를 이용하여 많은 서비스들이 만들어졌습니다.</p>\n<p>숨고의 서비스 규모가 성장하고 요구 사항이 많아지면서 이에 적합한 MSA Architecture를 검토하고 있었고 긴 시간 분석을 통해 숨고 전용의 MSA 프레임워크인 Soomgo-py를 만들어보기로 결정했습니다.</p>\n<p>아래는 Soomgo-py 프레임워크가 탄생하게된 대표적인 배경 세 가지입니다.</p>\n<ul>\n<li>서비스별로 존재하는 중복된 코드 및 모듈</li>\n<li>매번 프로젝트를 설정하는 번거로움</li>\n<li>낙후되어 관리하기 어려워진 레거시</li>\n</ul>\n<h1 id=\"서비스별로-중복된-코드-및-모듈\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4%EB%B3%84%EB%A1%9C-%EC%A4%91%EB%B3%B5%EB%90%9C-%EC%BD%94%EB%93%9C-%EB%B0%8F-%EB%AA%A8%EB%93%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스별로 중복된 코드 및 모듈</h1>\n<p>업계에 알려진 유명한 이론으로 프레임워크 구축 기준을 제시한 규칙이 있습니다. <em>Rule of Three</em> 라는 이 규칙은 최소 3번 이상 재사용 된다면 프레임워크를 구축할 수 있다는 말입니다.</p>\n<p>우리 모두가 알다시피 대부분의 Restful API의 요청/응답은 비슷하게 동작합니다. 이는 재사용 가능한 모듈로 만들어서 관련 인터페이스를 제공할 수 있다는 것을 의미합니다. 특정 리소스를 등록한다는 Post 메소드를 예로 들자면</p>\n<ul>\n<li>클라이언트가 특정 endpoint로 요청</li>\n<li>payload에 대한 validation 이후 비즈니스 로직 수행</li>\n<li>처리 결과에 대한 응답</li>\n</ul>\n<p>대부분의 제품 코드가 이보다 더 복잡할테지만 크게 본다면 위 단계를 벗어나지 않습니다. 이를 위하여 Soomgo-py에서는 장고의 CBV(Class-Based View)와 유사한 컨셉으로 구현하였습니다.</p>\n<p>다음의 코드는 Soomgo-py 프레임워크에서 제공한 CreateResource를 사용여 DB에 샘플리소스를 저장하는 소스코드 입니다.</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleCreateResource</span><span class=\"token punctuation\">(</span>CreateResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nmodel <span class=\"token operator\">=</span> SampleModel\nserializer <span class=\"token operator\">=</span> SampleSchema\nvalidation_schema <span class=\"token operator\">=</span> SampleValidationSchema\nauthentication_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>token_authentication<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">serializer_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> o <span class=\"token keyword\">in</span> objects<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre>\n<p>위 코드는 매우 간단한 예제입니다. CreateResource를 상속받아 클래스 속성(Class Attribute) 들을 선언하는 것만으로 특정 리소스를 저장합니다.</p>\n<p>물론, 필요하다면 메소드를 오버라이딩하여 확장할 수도 있습니다.</p>\n<h1 id=\"매번-프로젝트를-설정하는-번거로움\"><a href=\"#%EB%A7%A4%EB%B2%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EB%B2%88%EA%B1%B0%EB%A1%9C%EC%9B%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>매번 프로젝트를 설정하는 번거로움</h1>\n<p>서비스가 상용(Production) 레벨에서 운용되기 위해 API Endpoint controller만 필요한 게 아닙니다. 숨고에서는 실제로 서비스의 가용성(Availability)을 위해 다양한 도구들을 사용하고 있습니다.</p>\n<p>예를 들면, 모니터링을 위한 NewRelic, 이슈 트래킹을 위한 bugsnag 그리고 docker, k8s, black, flake8 등. 이런 모든 도구의 실행을 위해 Soomgo-py에서는 createapp 커맨드를 통해 각 도구의 설정을 자동으로 초기화 해줍니다.</p>\n<p>이로인해 엔지니어는 비즈니스 로직 이외에 다른 환경적인 이슈를 신경 쓰지 않아도 됨으로 생산성은 증가하고 실수는 감소합니다. 아래는 createapp 커맨드를 사용하여 프로젝트가 되는 동영상입니다.</p>\n<div style=\"padding:70% 0 0 0;width:100%;position:relative;\">\n    <iframe src=\"https://player.vimeo.com/video/474326664?h=4884da4e16\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<h1 id=\"레거시-모델\"><a href=\"#%EB%A0%88%EA%B1%B0%EC%8B%9C-%EB%AA%A8%EB%8D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>레거시 모델</h1>\n<p>어느 서비스에나 레거시 모델은 존재합니다. 마찬가지로 숨고에서도 MSA로 옮겨지지 못하고 이전 장고(Python Django)로 구현된 레거시 모델이 존재합니다.</p>\n<p>이 레거시 모델을 Soomgo-py에서 관리함으로써 MSA 서비스에서는 더 이상 레거시 모델에 대한 어떠한 관리도 할 필요가 없어졌습니다.</p>\n<p>. . .</p>\n<p>앞서 언급한 필요성 이외에도 Soomgo-py를 구축한 이유는 다음과 같고 실제로도 같은 이득을 얻고 있습니다.</p>\n<ol>\n<li>엔지니어의 생산성 증가</li>\n<li>일관성 있는 구조 및 코드로 유지보수성 향상</li>\n<li>중복 코드 최소화</li>\n<li>더 나은 서비스 품질을 위하여</li>\n</ol>\n<h1 id=\"soomgo-py-프레임워크의-장점\"><a href=\"#soomgo-py-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Soomgo-py 프레임워크의 장점</h1>\n<p>다음은 Soomgo-py 프레임워크가 가지고 있는 장점입니다.</p>\n<ol>\n<li><strong>사용성(Usability)</strong>: 훌륭한 프레임워크 일지라도 사용성이 떨어진다면 비즈니스 로직을 구현 함에 있어 장애물이 될 수 있습니다. Soomgo-py는 러닝 커브를 최소화하고자 상세한 문서화, 장고 CBV와 유사한 메소드 및 동작 패턴, Sample 코드 등을 도입하여 사용성을 높였습니다.</li>\n</ol>\n<p><img src=\"https://miro.medium.com/max/698/1*VhpqqjUnzyrXoNhdaXNCbg.png\"></p>\n<p>간단한 파일, 코드 추가로 CLI(Command Line Interface)를 구현할 수 있습니다. 아래 동영상은 test CLI를 추가한 영상입니다.</p>\n<div style=\"padding:70% 0 0 0;width:100%;position:relative;\">\n    <iframe src=\"https://player.vimeo.com/video/474518629?h=94a13a3ecd\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<ol start=\"2\">\n<li><strong>확장성(Extensibility)</strong>: 다형성을 통해 인터페이스에 대한 확장이 가능하도록 설계 되었고 인터페이스 이외에도 라이브러리에 대한 확장이 가능하도록 설계 되었습니다.</li>\n</ol>\n<p>예를 들어, WSGI로 Gunicorn를 사용 중인데, 이 외에 Uvicorn을 사용해야 한다면 Settings.WSGI_SERVER의 값을 ‘uvicorn’으로 변경하는 것으로 쉽게 다른 환경을 선택할 수 있습니다.</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseWSGI</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GunicornWSGI</span><span class=\"token punctuation\">(</span>BaseWSGI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UvicornASGI</span><span class=\"token punctuation\">(</span>BaseWSGI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WSGIFactor</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">server</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        wsgi <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>WSGI_SERVER\n        <span class=\"token keyword\">if</span> wsgi <span class=\"token operator\">==</span> <span class=\"token string\">'gunicorn'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> GunicornWSGI<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> wsgi <span class=\"token operator\">==</span> <span class=\"token string\">'uvicorn'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> UvicornASGI<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> WSGIServerError</code></pre>\n<ol start=\"3\">\n<li><strong>재사용성(Reusability)</strong>: 재사용 가능한 모듈을 제공함으로써 생산성을 증가 시킵니다. Soomgo-py 안에는 DB Connection polling, Cursor-Based Pagination, Offset-Based Pagination, logging같은 유용한 모듈들이 기본적으로 내장되어 있습니다.</li>\n</ol>\n<p>Soomgo-py는 외부에 오픈소스로 공개된 프레임워크는 아니지만 교육 목적을 포함한 여러 목적을 위하여 외부에 제공될 가능성이 있습니다.</p>\n<p>이후 방향을 고민 해본다면 좀 더 강력한 프레임워크로 발전시키기위해 더 많은 기능(자동 redoc, swagger, async 등)을 추가하여 지속적으로 확장될 예정입니다.</p>\n<p>Soomgo-py 프레임워크를 모두가 쓸만하도록 개선하여 오픈소스로 여러분들을 만날 수 있도록 준비하겠습니다. 감사합니다.</p>\n","date":"November 2nd 2020","author":{"id":"paul","title":"Paul Cho","image":"uploads/author-images/paul.jpeg","path":"/author/paul-cho/"}}}]}}},"context":{}}